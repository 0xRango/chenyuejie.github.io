<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="http://localhost:4000/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.3.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2016-11-11T20:34:20+08:00</updated><id>http://localhost:4000//</id><title type="html">技 术 迷 思</title><subtitle>design by buzzword</subtitle><entry><title type="html">微信小应用初体验</title><link href="http://localhost:4000/wechat-mini-app/" rel="alternate" type="text/html" title="微信小应用初体验" /><published>2016-11-11T00:00:00+08:00</published><updated>2016-11-11T00:00:00+08:00</updated><id>http://localhost:4000/wechat-mini-app</id><content type="html" xml:base="http://localhost:4000/wechat-mini-app/">&lt;p&gt;最近练手做了个H5小应用, 产品构思设计加基本原型实现用了差不多一周时间, 前端 vuejs 2.0, 后端 spring boot, 开发起来还是很顺畅, 而且在微信浏览器里面跑起来也是刷刷的.&lt;/p&gt;

&lt;p&gt;前几天, 微信宣布了微信小应用的公测, 正好这个h5小应用也做得差不多了, 想把他迁移到微信小应用, 比较下两者到底有啥区别, 所以借了朋友的小店营业执照弄了个号, 开始吧. （这里顺便吐槽下微信生态对开发者是多么不友好）&lt;/p&gt;

&lt;p&gt;有之前H5代码的基础, 基本上就花了两天时间做出了个差不多的小应用版本(大约20个页面), 这其中还包括前前后后差不多半天时间在搞定API的访问. 由于小应用被限定只能访问后台配置的服务器列表, 这些服务器列表必须是 https 的域名, 无法设定为本地IP. 幸好有 &lt;a href=&quot;https://ngrok.com/&quot;&gt;ngrok&lt;/a&gt;, 可以提供公网地址转发到本地地址, 找了个国内的服务器(ngrok现在固定名称的收费了, 有一些用之前开源版本搭建的服务, 自己搜索吧), 就可以测试起来了. 由于ngrok的域名是子域名, 一般服务器还没有做到泛域名证书, 因此在本地测试的时候, 需要把证书添加到信任列表, 但是在手机上测试就不行了(我没找到iOS上添加信任列表的方法), 在手机上测试就会出现API请求地址不受信任的错误, 没办法, 最后是在自己的vps再架设个nginx转发到ngrox, 这是想到的最快解决方案了, 好在现在用&lt;a href=&quot;/docker-lets-encrypt/&quot;&gt;docker启用ssl&lt;/a&gt;非常方便.&lt;/p&gt;

&lt;p&gt;整个开发过程基本没遇到什么问题, 熟悉前端开发的还是很容易上手的, 就是微信的开发文档不够友好, jsdoc都没有。&lt;/p&gt;

&lt;p&gt;关于小应用优缺点的讨论网络上已经非常多了，这里不多赘述, 我用下来最大的感受是&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;程序主体应该还是webview，只是微信做了大量定制优化，限定了组件类型，同时大部分的css都能用（小心selector的不同，具体见文档），这点和 react native还是有很大区别的（未考证）&lt;/li&gt;
  &lt;li&gt;如果主体是WebView, 小应用就是类是于cordova的hybrid架构, 只是微信帮你完成了cordova封装的工作，你不用再自己封装发包了，在微信里面自动完成，很好奇为什么phonegap没有考虑到这点…&lt;/li&gt;
  &lt;li&gt;只有一个宿主, 不用烦兼容性的问题&lt;/li&gt;
  &lt;li&gt;组件支持很多触摸事件，大大简化了的手势操作的开发，同时原生支持下拉 上拉等常见的事件, 简化了开发, 这点微信团队倒是很体贴&lt;/li&gt;
  &lt;li&gt;提供了一些原生组件比如日历选择器等，但是没看到可以自由扩展组件的地方, 只提供了个鸡肋的模板功能&lt;/li&gt;
  &lt;li&gt;集成了微信开放接口&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;总之, 微信小应用是极大简化了移动app开发的平台, 现在还不是很完善, 相信未来会更美好. 至于性能, 我测试下来倒是没什么感觉, 抛去首次加载的延迟, h5应用现在也跑的非常快了, 而PWA等框架会逐步解决这些问题，但是上面提到的小应用的平台优势是无法取代的, 尽管这是个封闭的平台。&lt;/p&gt;

&lt;p&gt;最后, 随便再次吐槽一下臭名昭著的&lt;a href=&quot;https://thx.github.io/mobile/300ms-click-delay&quot;&gt;300ms点击延迟问题&lt;/a&gt;，H5遭人诟病体验差他占了绝大部分功劳，如果没有这个问题, 一般的应用性APP在现在的设备上基本和原生差别不大了. 这个问题苹果引入它已经快10年了, 至今还没有通用的解决方案, 只能依赖一些第三方的库(我用的是&lt;a href=&quot;https://github.com/ftlabs/fastclick&quot;&gt;FastClick&lt;/a&gt;).&lt;/p&gt;</content><summary type="html">最近练手做了个H5小应用, 产品构思设计加基本原型实现用了差不多一周时间, 前端 vuejs 2.0, 后端 spring boot, 开发起来还是很顺畅, 而且在微信浏览器里面跑起来也是刷刷的.</summary></entry><entry><title type="html">Hello Again 的一点想法</title><link href="http://localhost:4000/about-hello-again/" rel="alternate" type="text/html" title="Hello Again 的一点想法" /><published>2016-11-02T00:00:00+08:00</published><updated>2016-11-02T00:00:00+08:00</updated><id>http://localhost:4000/about-hello-again</id><content type="html" xml:base="http://localhost:4000/about-hello-again/">&lt;p&gt;苹果于&lt;a href=&quot;https://www.apple.com/apple-events/october-2016/&quot;&gt;10月27号发布了新硬件&lt;/a&gt;, 主要是进一步瘦身, 只提供雷电3接口并且加了 touch bar 的 rMBP, 由于过高的价格(主要原因)导致吐槽声一片,包括我在内, 感觉购买的心晃动了, 一样的价格可以买 5K iMac, 有选择困难症了.&lt;/p&gt;

&lt;p&gt;然而, 在这前一天, 微软发布了 surface stadio 和 surface dial, 惊艳的设计让人们暂时忘记了它更加疯狂的价格, 3000$起, 好像人们也没有过多评论这个价格, 感觉还是对得起这个设计的. 不禁让人想起微软越来越像苹果的想法.&lt;/p&gt;

&lt;p&gt;从苹果的一般线路上看, 发布一个新硬件基本限定了这个产品线未来&lt;strong&gt;三到四年内的发展空间&lt;/strong&gt;, 也就是说一般情况下三到四年内不会有大的变化了, 从这点上看, 苹果这次发布(升级)确实是令人失望的. &lt;a href=&quot;https://www.youtube.com/watch?v=gWoqwCGQIM0&quot;&gt;不考虑触屏&lt;/a&gt;, 屏幕主机不能分离等微软12年(同rMBP发布)就开始做的事情表示了苹果一直的孤傲, 当然也有产品线冲突的缘故(iPad Pro), 但假若微软的方向是对的, 苹果将被微软拉开6-7年时间, 而如果在一两年内市场证明了这个方向, 两家公司在这个领域的发展速度可不是同日而语了. 苹果这次没有拿出可以信服的&lt;strong&gt;未来设计元素&lt;/strong&gt;, 简直就是拱手把这么大的市场让给对手了.&lt;/p&gt;

&lt;p&gt;还有被人喷的是 Phil这个死胖纸说的: &lt;a href=&quot;http://forums.macrumors.com/threads/apples-phil-schiller-we-dont-design-for-price-we-design-for-the-experience.2009951/&quot;&gt;We Don’t Design for Price, We Design for the Experience&lt;/a&gt;, 不提还好, 提了正好戳痛广大果粉的心, 广大果粉表示买一堆配件的体验真不错。&lt;/p&gt;

&lt;p&gt;这些都是我没看到真机的呓语, 苹果最近的传统是宣传图看上去很一般, 看到真机大不一样, 希望这次继续.&lt;/p&gt;

&lt;p&gt;Hello…show me the money again.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/think-dongle.png&quot; alt=&quot;Think Dongle&quot; /&gt;&lt;/p&gt;</content><summary type="html">苹果于10月27号发布了新硬件, 主要是进一步瘦身, 只提供雷电3接口并且加了 touch bar 的 rMBP, 由于过高的价格(主要原因)导致吐槽声一片,包括我在内, 感觉购买的心晃动了, 一样的价格可以买 5K iMac, 有选择困难症了.</summary></entry><entry><title type="html">使用Docker无痛启用Let’s Encrypt</title><link href="http://localhost:4000/docker-lets-encrypt/" rel="alternate" type="text/html" title="使用Docker无痛启用Let's Encrypt" /><published>2016-08-07T00:00:00+08:00</published><updated>2016-08-07T00:00:00+08:00</updated><id>http://localhost:4000/docker-lets-encrypt</id><content type="html" xml:base="http://localhost:4000/docker-lets-encrypt/">&lt;p&gt;最近搭了个服务器，部署了好几个服务，通过Docker容器&lt;a href=&quot;https://github.com/jwilder/nginx-proxy&quot;&gt;nginx-proxy&lt;/a&gt;自动实现了站点配置，非常舒服，就差最麻烦的 ssl 配置了。
早就听说了免费的&lt;a href=&quot;https://letsencrypt.org&quot;&gt;Let’s Encrypt&lt;/a&gt;，之前也看过几篇教程，看起来还是挺复杂的，用了Docker之后变得不想在操作系统上直接安装软件了（好吧，拖延症），今天正好有空想起这件事，上网搜了下，果然有人搞定了用Docker实现Let’s Encrypt的配置，哈哈，那就上吧！&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://letsencrypt.org&quot;&gt;Let’s Encrypt&lt;/a&gt; 就不多介绍了，自己看吧，&lt;a href=&quot;https://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion&quot;&gt;letsencrypt-nginx-proxy-companion&lt;/a&gt; 是用来自动创建，续约Let’s Encrypt证书的Nginx伴侣，用到另外一个Nginx伴侣 &lt;a href=&quot;jwilder/docker-gen&quot;&gt;docker-gen&lt;/a&gt;，和我目前的架构正好一致，只是再起个Container，然后启动其他应用的Container的时候加些参数&lt;/p&gt;

&lt;p&gt;附上 docker-compose.xml&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;version: '2'
services:
  nginx:
    image: nginx
    network_mode: bridge
    ports:
      - &quot;80:80&quot;
      - &quot;443:443&quot;
    container_name: nginx
    volumes:
      - /etc/nginx/vhost.d
      - /usr/share/nginx/html
      - /tmp/nginx:/etc/nginx/conf.d
      - ./certs:/etc/nginx/certs:ro
  docker-gen:
    image: jwilder/docker-gen
    network_mode: bridge
    container_name: docker-gen
    depends_on:
      - nginx
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - .:/etc/docker-gen/templates
    volumes_from:
      - nginx
    command: -notify-sighup nginx -watch /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf
  nginx-letsencrypt:
    image: jrcs/letsencrypt-nginx-proxy-companion
    network_mode: bridge
    volumes:
      - ./certs:/etc/nginx/certs:rw
      - /var/run/docker.sock:/var/run/docker.sock:ro
    volumes_from:
      - nginx
    environment:
      - NGINX_DOCKER_GEN_CONTAINER=docker-gen
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;应用 docker-compose 片段&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
client:
  image: nginx:alpine
  container_name: client
  network_mode: bridge
  ports:
    - &quot;127.0.0.1:8080:80&quot;
  environment:
    - VIRTUAL_HOST=app.imag.ink,imag.ink #nginx-proxy的域名
    - LETSENCRYPT_HOST=app.imag.ink,imag.ink #证书对应的域名
    - LETSENCRYPT_EMAIL=foo@bar.com #发送证书到期的提醒邮件地址
  volumes:
    - ./client:/usr/share/nginx/html:ro
...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;启动之后，稍等一会就可以用 https 访问了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/docker-https.png&quot; alt=&quot;docker https&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Go Green, Yeah!&lt;/p&gt;

&lt;p&gt;另外，好像起了这个Container之后，会自动把 http 重定向到 https 。 新加的域名有时候有问题，重启下Container就好了。&lt;/p&gt;

&lt;p&gt;起个Container，稍微做点配置，就搞定 ssl，还免费！！还要什么收费证书服务啊？
这个例子也另外一个方面说明的Docker的灵活强大，主要归功与 &lt;a href=&quot;https://github.com/jwilder/docker-gen&quot;&gt;docker-gen&lt;/a&gt; 的创新，Docker还会更多想象空间。。&lt;/p&gt;</content><summary type="html">最近搭了个服务器，部署了好几个服务，通过Docker容器nginx-proxy自动实现了站点配置，非常舒服，就差最麻烦的 ssl 配置了。
早就听说了免费的Let’s Encrypt，之前也看过几篇教程，看起来还是挺复杂的，用了Docker之后变得不想在操作系统上直接安装软件了（好吧，拖延症），今天正好有空想起这件事，上网搜了下，果然有人搞定了用Docker实现Let’s Encrypt的配置，哈哈，那就上吧！</summary></entry><entry><title type="html">Spring Boot 减少 tomcat 线程开销</title><link href="http://localhost:4000/spring-boot-tomcat-theads/" rel="alternate" type="text/html" title="Spring Boot 减少 tomcat 线程开销" /><published>2016-06-01T00:00:00+08:00</published><updated>2016-06-01T00:00:00+08:00</updated><id>http://localhost:4000/spring-boot-tomcat-theads</id><content type="html" xml:base="http://localhost:4000/spring-boot-tomcat-theads/">&lt;p&gt;最近在我的电脑上(mba 11’)实验 spring cloud 相关的项目, 发现在起了几个 spring boot 的实例之后, 电脑风扇就开始狂转, 我只是起服务器, 没有做大量的计算啊? 后来 Debug 看到 Tomcat 竟然开启了4, 500个进程, 看来 spring boot 默认是为线上产品配置的. 把 tomcat 线程减小之后, 风扇就不那么转了, :smiley:&lt;/p&gt;

&lt;p&gt;解决方法: application.yml 添加&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server:
  tomcat:
    max-threads: 20
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><summary type="html">最近在我的电脑上(mba 11’)实验 spring cloud 相关的项目, 发现在起了几个 spring boot 的实例之后, 电脑风扇就开始狂转, 我只是起服务器, 没有做大量的计算啊? 后来 Debug 看到 Tomcat 竟然开启了4, 500个进程, 看来 spring boot 默认是为线上产品配置的. 把 tomcat 线程减小之后, 风扇就不那么转了, :smiley:</summary></entry><entry><title type="html">You’re up and running!</title><link href="http://localhost:4000/Hello-World/" rel="alternate" type="text/html" title="You're up and running!" /><published>2014-03-03T00:00:00+08:00</published><updated>2014-03-03T00:00:00+08:00</updated><id>http://localhost:4000/Hello-World</id><content type="html" xml:base="http://localhost:4000/Hello-World/">&lt;p&gt;之前用Hugo在本地写了几篇文章, 感觉设置有点复杂, 一直没传到Github, 还是这个简单, 不需要做什么配置, 本来就写不了几篇文章嘛, :D.&lt;/p&gt;

&lt;p&gt;这篇文章直接修改 Jekyll Now 默认第一篇文章.&lt;/p&gt;

&lt;p&gt;如果想知道本博客的搭建方式, 请移步 &lt;a href=&quot;https://github.com/barryclark/jekyll-now&quot;&gt;Jekyll Now&lt;/a&gt;&lt;br /&gt;
For more instructions head over to the &lt;a href=&quot;https://github.com/barryclark/jekyll-now&quot;&gt;Jekyll Now repository&lt;/a&gt; on GitHub.&lt;/p&gt;</content><summary type="html">之前用Hugo在本地写了几篇文章, 感觉设置有点复杂, 一直没传到Github, 还是这个简单, 不需要做什么配置, 本来就写不了几篇文章嘛, :D.</summary></entry></feed>
